name: Deploy

on:
  workflow_call:
    inputs:
      commit:
        description: 'Commit hash to deploy'
        type: string
        required: true
      environment:
        description: 'Environment to destroy to'
        required: true
        type: string
    outputs:
      bucket:
        description: 'S3 bucket name'
        value: ${{ jobs.main.result.outputs.bucket }}
      id:
        description: 'Cloudfront distribution id'
        value: ${{ jobs.main.result.outputs.id }}
      url:
        description: 'Cloudfront distribution url'
        value: ${{ jobs.main.result.outputs.url }}
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit hash to deploy'
        required: true
      environment:
        description: 'Environment to destroy to'
        required: true
        type: choice
        default: qa
        options:
          - tmp
          - qa
          - prod

jobs:
  main:

    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - if: github.event_name != 'workflow_call'
      uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'
    - run: yarn install --frozen-lockfile
    - run: yarn build
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::503479554940:role/RG-Systems-GH-Actions
        role-session-name: vp-cdk-deploy
        aws-region: us-east-1
    - id: vars
      run: |
        if [ "${{ inputs.environment }}" = "tmp" ]; then
          echo "stack=vite-project-ui-env-tmp-${{ inputs.commit }}" >> $GITHUB_OUTPUT
        else
          echo "stack=vite-project-ui-env-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        fi
    - run: npx cdk deploy ${{ steps.vars.outputs.stack }} --require-approval never --outputs-file cdk-outputs.json
    - id: result
      run: |
        echo "bucket=$(jq -r '."${{ steps.vars.outputs.stack }}".BucketName' cdk-outputs.json)" >> $GITHUB_OUTPUT
        echo "id=$(jq -r '."${{ steps.vars.outputs.stack }}".DistributionId' cdk-outputs.json)" >> $GITHUB_OUTPUT
        echo "url=$(jq -r '."${{ steps.vars.outputs.stack }}".DeploymentUrl' cdk-outputs.json)" >> $GITHUB_OUTPUT
